plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

application {
    mainClass = 'org.example.SpringBootDemoApplication'
}

repositories {
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()
}

dependencies {
    // *** spring ***
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.7.18'
    // https://mvnrepository.com/artifact/io.spring.gradle/dependency-management-plugin
//    implementation group: 'io.spring.gradle', name: 'dependency-management-plugin', version: '1.1.5'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    implementation 'org.springframework.boot:spring-boot-starter-web:2.7.18'
    // *** log4j2 ***
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-logging
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-logging', version: '2.7.18'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-log4j2
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '2.7.18'
    // *** lombok ***
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.34'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.34'

    // jacoco
    // https://mvnrepository.com/artifact/org.jacoco/jacoco-maven-plugin
//    implementation group: 'org.jacoco', name: 'jacoco-maven-plugin', version: '0.8.12'
    testImplementation 'org.jacoco:org.jacoco.agent:0.8.12'

    //
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    enabled true
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/example/controller/**",
                    // ....
            ])
        }))
    }
}

//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            limit {
//                counter = 'COMPLEXITY'
//                value = 'COVEREDRATIO'
//                minimum = 0.44
//            }
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                minimum = 0.99
//            }
//            limit {
//                counter = 'BRANCH'
//                value = 'COVEREDRATIO'
//                minimum = 0.17
//            }
//        }
//    }
//}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
            includes = [
                    "org.example.*.service.*",
                    "org.example.*.mapper.*"
            ]
            excludes = [
                    "org.example.*.healthcheck.*"
            ]
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
check.dependsOn jacocoTestReport
